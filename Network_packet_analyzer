# packet sniffer tool by   - Shaik Abbu Bakar Siddik  
from scapy.all import sniff, IP, TCP, UDP, ICMP, Raw

def packet_callback(packet):
    # Check if the packet has an IP layer
    if IP in packet:
        ip_src = packet[IP].src
        ip_dst = packet[IP].dst
        protocol = packet[IP].proto

        # Determine the protocol used in the packet
        if protocol == 6:
            protocol_name = "TCP"
        elif protocol == 17:
            protocol_name = "UDP"
        elif protocol == 1:
            protocol_name = "ICMP"
        else:
            protocol_name = "OTHER"

        # Display basic information about the packet
        print(f"[{protocol_name}] Source: {ip_src} -> Destination: {ip_dst}")

        # Display payload data if available
        if Raw in packet:
            payload_data = packet[Raw].load
            print(f"Payload: {payload_data}\n")
        else:
            print("No Payload\n")

def start_sniffing():
    print("Starting packet sniffing...")
    sniff(prn=packet_callback, store=0)

if __name__ == "__main__":
    start_sniffing()
